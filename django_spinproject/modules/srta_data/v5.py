_CONTENT = {
	'bootstrap': '''#!/bin/sh
set -e
set -x

which python3
#which virtualenv
which poetry

if [ "$(cat pyproject.toml | grep '^packages')" ]; then
	echo 'Warning: The "packages" option has been detected in pyproject.toml. This may lead to a dependency installation error.'
fi

if [ ! -e README.md ]; then
	echo "Missing README.md. Creating an empty one for you."
	touch README.md
fi

poetry install --sync --no-root''',

	'console': '''#!/bin/sh
set -e
set -x

poetry run python3 manage.py shell''',

	'server': '''#!/bin/sh
set -e
set -x

poetry run python3 manage.py runserver 0.0.0.0:8000''',

	'setup': '''#!/bin/sh
set -e
set -x

script/bootstrap

# Create .env if not present
MAIN_FOLDER={{ name }}
if [ ! -e $MAIN_FOLDER/.env ]; then
	# Copy template
	cp $MAIN_FOLDER/.env.example $MAIN_FOLDER/.env
	SECRET="$(poetry run python3 -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())")"
	# The $ symbol is replaced because django-environ is trying to read the value of an environment variable
	SAFE_SECRET=`printf "%s" "$SECRET" | sed 's/\\\\\\$/~/g' | sed 's/\\\\\\\\/\\\\\\\\\\\\\\\\/g' | sed 's/\\\\&/\\\\\\\\&/g'`
	sed -i 's|DJANGO_SECRET_KEY=""|DJANGO_SECRET_KEY="'$SAFE_SECRET'"|g' $MAIN_FOLDER/.env
	# Show
	cat $MAIN_FOLDER/.env
	echo ".env has been autogenerated, to edit: $ nano $MAIN_FOLDER/.env"
fi
# Clear SQLite database if present
if [ -e db.sqlite3 ]; then
        mv db.sqlite3 db.sqlite3~
fi
# Run migrations
poetry run python3 manage.py migrate''',

	'test': '''#!/bin/sh
set -e
set -x


lint() {
	poetry run flake8 --select=C,F,E101,E112,E502,E72,E73,E74,E9,W291,W6 --exclude=.cache,migrations
	poetry run flake8 --select=EZL --exclude=.cache
}


case $# in
	0)
		lint
		poetry run pytest
		poetry run ./manage.py makemigrations --check --dry-run
		;;
	1)
		case $1 in
			'--lint')
				lint
				;;
			*)
				printf 'Incorrect arg: %s\\n' $1 >&2
				exit 2
				;;
		esac
		;;
	*)
		echo 'Incorrect count of args' >&2
		exit 2
		;;
esac''',

	'update': '''#!/bin/sh
set -e
set -x

script/bootstrap
poetry run python3 manage.py migrate''',

	'cibuild': '''#!/bin/sh
set -e
set -x

export CI=true

poetry export -f requirements.txt | poetry run pip-audit-extra --severity HIGH --fail-level CRITICAL

script/test''',

	'x-clean': '''#!/bin/sh
set -e
set -x

find -depth -name '__pycache__' -exec rm -rfv '{}' ';'
'''
}
_SYMLINKS = {
	'shell': 'console',
	'run': 'server',
}
